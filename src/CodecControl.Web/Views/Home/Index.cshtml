
@{
    ViewData["Title"] = "CodecControl";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <meta name="description" content="Codec control gateway" />
    <title>@ViewBag.Title</title>

    <style>
        body, html {
            margin: 0;
            padding: 0;
            font-family: roboto, Arial, Helvetica, sans-serif !important;
            -webkit-font-smoothing: subpixel-antialiased;
            -ms-text-size-adjust: 100%;
            -webkit-text-size-adjust: 100%;
            line-height: 1;
            background: #ffffff;
        }

        .conf-container {
            margin: 0 auto;
            padding: 3vh 5vw;
            margin: 0;
        }

        .conf-site {
            font-size: 5vw;
            font-weight: 600;
            color: #000000;
            line-height: 1;
        }

        .conf-links {
            font-size: 1.5em;
            font-weight: 300;
            color: #5c22b3;
            display: block;
            width: 100%;
            padding: 2vh 0;
            text-align: right;
        }

        .conf-version {
            font-size: 3vw;
            font-weight: 200;
            line-height: 1.5;
        }

        .conf-environment {
            font-size: 3vw;
            font-weight: 600;
        }

        .conf-server {
            font-size: 3vw;
            font-weight: 400;
        }

        .conf-started {
            font-size: 2.5vw;
            font-weight: 400;
            line-height: 1.5;
        }

        .conf-headline {
            margin-top: 3vh;
            font-weight: 400;
            font-size: 1.2em;
            padding: 5px 0;
        }

        .conf-form {
            padding: 1vh 0;
        }

        a {
            color: #4263e6;
            text-decoration: underline;
            cursor:pointer;
        }

        a:hover {
            color: #9a42ce;
            text-decoration: underline;
        }

        .doc-info-table {
            width: 100%;
            margin: 1vh 0;
            line-height: 1.5;
            border: 1px solid #a7a7a7;
            text-align: left;
        }

        .doc-info-table th {
            background: #e0e0e0;
            font-size: smaller;
            padding: 5px;
            font-size: 11pt;
        }

            .doc-info-table td {
                background: #7dff7d; /* #c5ff82;*/
                padding: 5px;
                font-size: 11pt;
                border: 0;
                border-top: 1px solid #ebebeb;
            }

        .doc-link-ex a {
            text-transform: capitalize;
            text-decoration: underline;
        }


        .btn {
            line-height: 2;
            padding: 0.5vh 2vw;
            margin: 0 1vw 0 0;
            display: inline-block;
            font-size: 1em;
            cursor: pointer;
        }

        .current {
            background: #e7fffa;
            background: #e7fffa;
        }

        label.subheader {
            padding: 8px 0;
            margin: 0;
            display: block;
        }

        ::placeholder {
            color: lightgray;
            opacity: 1;
        }

        .header {
            display: block;
            font-size: 2em;
            margin-block-end: 1em;
            font-weight: bold;
        }

        .small {
            font-size: 12px;
        }

        .unit {
            margin-top: 45px;
        }

        .codecs {
            width: 700px;
        }

        .codec-name {
            width: 200px;
            float: left
        }

        .codecs button {
            width: 90px
        }

        .codecs .vu-values {
            width: 170px;
            display: inline-block;
        }

        .codecs .updated {
            font-size: smaller;
        }

        button {
            background: #5f5f5f;
            border: 1px solid #313131;
            color: #fff;
            padding: 0 30px;
            min-height: 35px;
            font-size: 1em;
            cursor: pointer;
            -webkit-transition: all 0.2s;
            -moz-transition: all 0.2s;
            transition: all 0.2s;
            border-radius: 2px;
        }

        button:hover {
            background: #333333;
        }

        input, select {
            border: 0;
            padding: 0 0 0 10px;
            background: #fff;
            border: 1px solid #4c4c4c;
            font-size: 1em;
            border-radius: 0;
            outline: 0;
            -webkit-appearance: none;
            height: 35px;
            box-sizing: border-box;
            border-radius: 2px;
            min-width: 35%;
        }

        select {
            padding: 0 30px 0 10px;
            background-image: linear-gradient(45deg, transparent 50%, #000000 50%), linear-gradient(135deg, black 50%, transparent 50%), linear-gradient(to right, white, white);
            background-position: calc(100% - 16px) calc(0.8em + 2px), calc(100% - 11px) calc(0.8em + 2px), 100% 0;
            background-size: 5px 5px, 5px 5px, 2.5em 2.5em;
            background-repeat: no-repeat;
        }
    </style>

</head>
<body>

    <div class="conf-container">
        <div id="conf-links" class="conf-links"><a href="/swagger">API documentation</a> - <a href="/log">Log</a></div>
        <div id="conf-site" class="conf-site">CodecControl</div>
        <div id="conf-version" class="conf-version">@ViewData["Version"]</div>
        <div id="conf-environment" class="conf-environment">@ViewData["Environment"]</div>
        <div id="conf-started" class="conf-started">@ViewData["ReleaseDate"]</div>
        <div id="conf-server" class="conf-server">@ViewData["Server"]</div>
    </div>

    <div class="conf-container" id="app">

        <div class="unit">
            <div class="conf-headline">
                Subscriptions
            </div>

            <div class="conf-form">
                <button v-on:click="getSubscriptions">Reload</button>
            </div>

            <table cellspacing="0" cellpadding="0" border="0" class="doc-info-table">
                <thead>
                    <tr>
                        <th>Connection id</th>
                        <th>Sip-address</th>
                    </tr>
                </thead>
                <tbody v-if="subscriptions.length > 0">
                    <tr v-for="subscription in subscriptions">
                        <td>{{subscription.connectionId}}</td>
                        <td>{{subscription.sipAddress}}</td>
                    </tr>
                </tbody>
                <tbody v-if="subscriptions.length == 0">
                    <tr>
                        <td colspan="2">
                            No subscriptions
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="unit">

            <div class="conf-headline">
                Codec information
            </div>

            <div class="conf-form">
                <label for="sipAddress" class="subheader">Get codec information from CCM </label>

                <input id="sipAddress"
                       type="text"
                       placeholder="SIP-address"
                       v-model="sipAddress"
                       v-on:keydown.enter="getCodecInformationBySipAddress(sipAddress)"
                       class="input-text" />

                <button v-on:click="getCodecInformationBySipAddress(sipAddress)">Fetch info</button>
            </div>

            <div class="conf-form">
                {{userFeedback}}
            </div>

            <table cellspacing="0" class="doc-info-table">
                <thead>
                    <tr>
                        <th>Sip-address</th>
                        <th>IP</th>
                        <th>API</th>
                        <th>Vu-values Rx</th>
                        <th>Vu-values Tx</th>
                        <th>Codec-updated</th>
                        <th>Subscribe / Unsubscribe</th>
                    </tr>
                </thead>
                <tbody v-if="codecs.length > 0">
                    <tr v-for="codec in codecs">
                        <td>
                            {{codec.sipAddress}}
                        </td>
                        <td>
                            {{codec.ip}}
                        </td>
                        <td>
                            {{codec.api}}
                        </td>
                        <td>
                            Rx: {{codec.audioStatus.vuValues.rxLeft}} / {{codec.audioStatus.vuValues.rxRight}}
                        </td>
                        <td>
                            Tx: {{codec.audioStatus.vuValues.txLeft}} / {{codec.audioStatus.vuValues.txRight}}
                        </td>
                        <td>
                            {{codec.updated}}
                        </td>
                        <td>
                            <button v-on:click="subscribe(codec.sipAddress)">Subscribe</button>
                            <button v-on:click="unsubscribe(codec.sipAddress)">Unsubscribe</button>
                        </td>
                    </tr>
                </tbody>
                <tbody v-if="codecs.length == 0">
                    <tr>
                        <td colspan="7">
                            No codecs
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="unit">
            <div class="conf-headline">
                Settings
            </div>

            <div class="conf-form">
                Log Path: @ViewData["LogFolder"]
            </div>

            <div class="conf-form">
                <label for="selectedLogLevel" class="subheader">Current log level: {{currentLogLevel}}</label>
                <select v-model="selectedLogLevel" id="selectedLogLevel">
                    <option v-for="level in logLevels" v-bind:value="level">{{level}}</option>
                </select>
                <button v-on:click="setLogLevel(selectedLogLevel)">Change log level</button>
            </div>
        </div>
    </div>

</body>

<script src="~/lib/signalr/dist/browser/signalr.js"></script>
<script src="~/lib/vue/dist/vue.js"></script>
<script src="~/lib/axios/dist/axios.js"></script>
<script src="~/js/codeccontrol.js"></script>
<script>
    app.currentLogLevel = '@ViewData["CurrentLogLevel"]'
    app.selectedLogLevel = app.currentLogLevel;
</script>

</html>